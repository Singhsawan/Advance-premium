group fsub code


@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    try:
        user_id = message.from_user.id if message.from_user else None
        chat_id = message.chat.id
        crazy_chatID = await db.get_chat(int(chat_id))

        is_verified = crazy_chatID.get('is_crazy_verified', False)

        if not is_verified:
            await client.send_message(message.chat.id, "<u>⁉️ 𝐍𝐨𝐭𝐢𝐜𝐞 𝐀𝐥𝐞𝐫𝐭 </u> \n\n<b>⚜️ ᴛʜɪꜱ ᴄʜᴀᴛ ɪꜱ ɴᴏᴛ ᴠᴇʀɪꜰɪᴇᴅ ʏᴇᴛ. ɪꜰ ʏᴏᴜ ᴀʀᴇ ᴀ ɢʀᴏᴜᴘ ᴏᴡɴᴇʀ ᴏʀ ᴀᴅᴍɪɴ, ᴘʟᴇᴀꜱᴇ ᴜꜱᴇ ᴛʜᴇ /verify ᴄᴏᴍᴍᴀɴᴅ ᴛᴏ ʀᴇQᴜᴇꜱᴛ ᴠᴇʀɪꜰɪᴄᴀᴛɪᴏɴ ꜰᴏʀ ʏᴏᴜʀ ɢʀᴏᴜᴘ...</b>")
            return

        settings = await get_settings(chat_id)
        f_sub = settings.get('f_sub')

        if f_sub:
            try:
                member = await client.get_chat_member(f_sub, user_id)
                manual = await manual_filters(client, message)
                if not manual and settings.get('auto_ffilter', False):
                    await auto_filter(client, message)
                
            except UserNotParticipant:
                f_link = await client.export_chat_invite_link(f_sub)
                mks = await message.reply(
                    f"<b> ⚠️ ᴅᴇᴀʀ {message.from_user.mention} ❗ \n\n 🙁 ꜰɪʀꜱᴛ ᴊᴏɪɴ ᴏᴜʀ ᴄʜᴀɴɴᴇʟ ᴛʜᴇɴ ʏᴏᴜ ᴡɪʟʟ ɢᴇᴛ ᴍᴏᴠɪᴇ, ᴏᴛʜᴇʀᴡɪꜱᴇ ʏᴏᴜ ᴡɪʟʟ ɴᴏᴛ ɢᴇᴛ ɪᴛ.\n\nᴄʟɪᴄᴋ ᴊᴏɪɴ ᴄʜᴀɴɴᴇʟ ʙᴜᴛᴛᴏɴ 👇</b>",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("⛔ ᴊᴏɪɴ ᴄʜᴀɴɴᴇʟ ⛔", url=f_link)],
                        [InlineKeyboardButton("♻️ ᴛʀʏ ᴀɢᴀɪɴ ♻️", callback_data='checkuser')]
                    ])
                )
                await asyncio.sleep(60)
                await mks.delete()
                return False
        else:
            if is_verified:
                manual = await manual_filters(client, message)
                if not manual:
                    try:
                        if settings.get('auto_ffilter', False):
                            await auto_filter(client, message)
                    except KeyError:
                        grpid = await active_connection(str(message.from_user.id))
                        await save_group_settings(grpid, 'auto_ffilter', True)
                        if settings.get('auto_ffilter', False):
                            await auto_filter(client, message)

            if f_sub is None and settings.get('auto_ffilter', False):
                await auto_filter(client, message)

    except Exception as e:
        logger.error(f"Error in processing message: {e}")
